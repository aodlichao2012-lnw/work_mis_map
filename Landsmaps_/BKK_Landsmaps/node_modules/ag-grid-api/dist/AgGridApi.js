'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AgGridApi = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('./constants');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_OPTIONS = {
    log: false,
    flatten: true,
    apiFunctions: _constants.ALL_AG_GRID_API_FUNCTIONS
};

/** Ag grid Higher Order Component which gives you all the API functions from ag-grid. */
var AgGridApi = exports.AgGridApi = function AgGridApi(DecoratedComponent) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;

    var AgGridApi = function (_Component) {
        _inherits(AgGridApi, _Component);

        function AgGridApi() {
            var _arguments = arguments;

            _classCallCheck(this, AgGridApi);

            var _this = _possibleConstructorReturn(this, (AgGridApi.__proto__ || Object.getPrototypeOf(AgGridApi)).call(this));

            _this.afterGridReady = function (callback) {
                var options = Array.prototype.slice.call(_arguments, 1);
                var _this$state = _this.state,
                    isGridReady = _this$state.isGridReady,
                    gridParams = _this$state.gridParams;


                if (isGridReady) {
                    // Setting the this of the callback to be gridParams.api and calling the callback with provided
                    // options (if any)
                    return callback.call.apply(callback, [gridParams.api].concat(_toConsumableArray(options)));
                } else if (options.log) {
                    (0, _utils.warnThatAgGridHasNotLoadedYet)();
                }
            };

            _this.gridParamsFunctionSelector = function (functionName) {
                return _this.state.gridParams.api[functionName];
            };

            _this.onGridReady = function (params) {
                _this.setState({
                    isGridReady: true,
                    gridParams: params
                });

                (0, _utils.callWrapperComponentOnGridReady)({ props: _this.props, params: params });
            };

            _this.sizeColumnsToFit = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('sizeColumnsToFit'));
            };

            _this.setColumnDefs = function (colDefs) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setColumnDefs'), colDefs);
            };

            _this.setRowData = function (rows) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setRowData'), rows);
            };

            _this.setDatasource = function (datasource) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setDatasource'), datasource);
            };

            _this.setFloatingTopRowData = function (rowData) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setFloatingTopRowData'), rowData);
            };

            _this.setFloatingBottomRowData = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setFloatingBottomRowData'));
            };

            _this.getFloatingTopRowCount = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFloatingTopRowCount'));
            };

            _this.getFloatingBottomRowCount = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFloatingBottomRowCount'));
            };

            _this.getFloatingTopRow = function (index) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFloatingTopRow'), index);
            };

            _this.getFloatingBottomRow = function (index) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFloatingBottomRow'), index);
            };

            _this.getModel = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getModel'));
            };

            _this.refreshInMemoryRowModel = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshInMemoryRowModel'));
            };

            _this.forEachNode = function (callback) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('forEachNode'), callback);
            };

            _this.forEachNodeAfterFilter = function (callback) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('forEachNodeAfterFilter'), callback);
            };

            _this.forEachNodeAfterFilterAndSort = function (callback) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('forEachNodeAfterFilterAndSort'), callback);
            };

            _this.forEachLeafNode = function (callback) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('forEachLeafNode'), callback);
            };

            _this.selectAll = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('selectAll'));
            };

            _this.deselectAll = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('deselectAll'));
            };

            _this.selectAllFiltered = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('selectAllFiltered'));
            };

            _this.deselectAllFiltered = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('deselectAllFiltered'));
            };

            _this.getSelectedNodes = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getSelectedNodes'));
            };

            _this.getSelectedRows = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getSelectedRows'));
            };

            _this.getBestCostNodeSelection = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getBestCostNodeSelection'));
            };

            _this.getRangeSelections = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getRangeSelections'));
            };

            _this.addRangeSelection = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addRangeSelection'));
            };

            _this.clearRangeSelection = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('clearRangeSelection'));
            };

            _this.refreshView = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshView'));
            };

            _this.sortRefreshView = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('sortRefreshView'));
            };

            _this.refreshRows = function (rowNodes) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshRows'), rowNodes);
            };

            _this.refreshCells = function (rowNodes, colIds) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('refreshCells'), rowNodes, colIds);
            };

            _this.refreshHeader = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshHeader'));
            };

            _this.refreshGroupRows = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshGroupRows'));
            };

            _this.refreshGroup = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('refreshGroup'));
            };

            _this.getFirstRenderedRow = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFirstRenderedRow'));
            };

            _this.getLastRenderedRow = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getLastRenderedRow'));
            };

            _this.setQuickFilter = function (quickFilter) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setQuickFilter'), quickFilter);
            };

            _this.isQuickFilterPresent = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('isQuickFilterPresent'));
            };

            _this.isAdvancedFilterPresent = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('isAdvancedFilterPresent'));
            };

            _this.isAnyFilterPresent = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('isAnyFilterPresent'));
            };

            _this.getFilterInstance = function (col) {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFilterInstance'), col);
            };

            _this.getFilterModel = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFilterModel'));
            };

            _this.setFilterModel = function (model) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setFilterModel'), model);
            };

            _this.onFilterChanged = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('onFilterChanged'));
            };

            _this.destroyFilter = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('destroyFilter'));
            };

            _this.onSortChanged = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('onSortChanged'));
            };

            _this.setSortModel = function (model) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setSortModel'), model);
            };

            _this.getSortModel = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getSortModel'));
            };

            _this.expandAll = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('expandAll'));
            };

            _this.collapseAll = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('collapseAll'));
            };

            _this.onGroupExpandedOrCollapsed = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('onGroupExpandedOrCollapsed'));
            };

            _this.recomputeAggregates = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('recomputeAggregates'));
            };

            _this.getFocusedCell = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getFocusedCell'));
            };

            _this.setFocusedCell = function (rowIndex, colKey, floating) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setFocusedCell'), rowIndex, colKey, floating);
            };

            _this.clearFocusedCell = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('clearFocusedCell'));
            };

            _this.tabToNextCell = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('tabToNextCell'));
            };

            _this.tabToPreviousCell = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('tabToPreviousCell'));
            };

            _this.stopEditing = function () {
                var cancel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

                _this.afterGridReady(_this.gridParamsFunctionSelector('stopEditing'), cancel);
            };

            _this.startEditingCell = function (params) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('startEditingCell'), params);
            };

            _this.exportDataAsCsv = function () {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.gridParams;

                _this.afterGridReady(_this.gridParamsFunctionSelector('exportDataAsCsv'), params);
            };

            _this.getDataAsCsv = function () {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.gridParams;

                return _this.afterGridReady(_this.gridParamsFunctionSelector('getDataAsCsv'), params);
            };

            _this.exportDataAsExcel = function () {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.gridParams;

                _this.afterGridReady(_this.gridParamsFunctionSelector('exportDataAsExcel'), params);
            };

            _this.getDataAsExcel = function () {
                var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.state.gridParams;

                return _this.afterGridReady(_this.gridParamsFunctionSelector('getDataAsExcel'), params);
            };

            _this.addEventListener = function (eventType, listener) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addEventListener'), eventType, listener);
            };

            _this.addGlobalListener = function (listener) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addGlobalListener'), listener);
            };

            _this.removeEventListener = function (eventType, listener) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('removeEventListener'), eventType, listener);
            };

            _this.removeGlobalListener = function (listener) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('removeGlobalListener'), listener);
            };

            _this.dispatchEvent = function (eventType, event) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('dispatchEvent'), eventType, event);
            };

            _this.getRenderedNodes = function () {
                return _this.afterGridReady(_this.gridParamsFunctionSelector('getRenderedNodes'));
            };

            _this.ensureIndexVisible = function (index) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('ensureIndexVisible'), index);
            };

            _this.ensureColumnVisible = function (colId) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('ensureColumnVisible'), colId);
            };

            _this.ensureNodeVisible = function (comparator) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('ensureNodeVisible'), comparator);
            };

            _this.getVerticalPixelRange = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('getVerticalPixelRange'));
            };

            _this.showLoadingOverlay = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('showLoadingOverlay'));
            };

            _this.showNoRowsOverlay = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('showNoRowsOverlay'));
            };

            _this.hideOverlay = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('hideOverlay'));
            };

            _this.copySelectedRangeToClipboard = function (includeHeaders) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('copySelectedRangeToClipboard'), includeHeaders);
            };

            _this.copySelectedRangeDown = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('copySelectedRangeDown'));
            };

            _this.paginationIsLastPageFound = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationIsLastPageFound'));
            };

            _this.paginationGetPageSize = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGetPageSize'));
            };

            _this.paginationSetPageSize = function (newPageSize) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationSetPageSize'), newPageSize);
            };

            _this.paginationGetCurrentPage = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGetCurrentPage'));
            };

            _this.paginationGetTotalPages = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGetTotalPages'));
            };

            _this.paginationGoToPage = function (pageNumber) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGoToPage'), pageNumber);
            };

            _this.paginationGoToNextPage = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGoToNextPage'));
            };

            _this.paginationGoToPreviousPage = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGoToPreviousPage'));
            };

            _this.paginationGoToFirstPage = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGoToFirstPage'));
            };

            _this.paginationGoToLastPage = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('paginationGoToLastPage'));
            };

            _this.addRenderedRowListener = function (event, rowIndex, callback) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addRenderedRowListener'), event, rowIndex, callback);
            };

            _this.showToolPanel = function (show) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('showToolPanel'), show);
            };

            _this.isToolPanelShowing = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('isToolPanelShowing'));
            };

            _this.doLayout = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('doLayout'));
            };

            _this.getValue = function (colKey, node) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('getValue'), colKey, node);
            };

            _this.setHeaderHeight = function (value) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('setHeaderHeight'), value);
            };

            _this.destroy = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('destroy'));
            };

            _this.showColumnMenuAfterButtonClick = function (colKey, buttonElement) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('showColumnMenuAfterButtonClick'), colKey, buttonElement);
            };

            _this.showColumnMenuAfterMouseClick = function (colKey, buttonElement) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('showColumnMenuAfterMouseClick'), colKey, buttonElement);
            };

            _this.checkGridSize = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('checkGridSize'));
            };

            _this.resetRowHeights = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('resetRowHeights'));
            };

            _this.onRowHeightChanged = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('onRowHeightChanged'));
            };

            _this.copySelectedRowsToClipboard = function (includeHeaders, columnKeys) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('copySelectedRowsToClipboard'), includeHeaders, columnKeys);
            };

            _this.addAggFunc = function (key, aggFunc) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addAggFunc'), key, aggFunc);
            };

            _this.addAggFuncs = function (addAggFuncs) {
                _this.afterGridReady(_this.gridParamsFunctionSelector('addAggFuncs'), addAggFuncs);
            };

            _this.clearAggFuncs = function () {
                _this.afterGridReady(_this.gridParamsFunctionSelector('clearAggFuncs'));
            };

            _this.agGridPassedDownFunctionsMemoized = false;
            _this.agGridApiFunctionsPassedDown = {};
            _this.state = {
                gridParams: {
                    api: {}
                },
                isGridReady: false
            };
            return _this;
        }

        /**
         * Function which will check if grid is initialised and then call the callback that is passed as a parameter
         * with the next parameters provided, if any.
         * @function
         * @param {function} callback - callback function which will be called if grid is initialised.
         * */


        /**
         * Function which will select an api function from gridParams object and return it.
         * Warning!!! If you call the returned function without explicitly setting the this to be gridParams.api
         * it won't be called with gridParams.api context.
         * @function
         * @return {function} - ag-grid-api function selected from gridParams.api
         * */


        /**
         * Event handler, which will be called when Ag-Grid has initialised.
         * @function
         * */


        /* Columns start */
        /**
         * Gets columns to adjust in size to fit the grid horizontally.
         * @function
         * */


        /**
         * 	Call to set new column definitions into the grid. The grid will redraw all the column headers,
         * 	and then redraw all of the rows. The rows will not be discarded, so any selections,
         * 	scrolling or groups open, will stay.
         * @function
         * */

        /* Columns end */

        /* Data start */
        /**
         * 	Call to set new column definitions into the grid. The grid will redraw all the column headers,
         * 	and then redraw all of the rows. The rows will not be discarded, so any selections,
         * 	scrolling or groups open, will stay.
         * @function
         * */


        /**
         * 	Call to set new column definitions into the grid. The grid will redraw all the column headers,
         * 	and then redraw all of the rows. The rows will not be discarded, so any selections,
         * 	scrolling or groups open, will stay.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Method for getting and setting the data and getting the Row Nodes of the floating rows.
         * @function
         * */


        /**
         * Returns the row model inside the table. From here you can see the original rows,
         * rows after filter has been applied, rows after aggregation has been applied,
         * and the final set of 'to be displayed' rows.
         * @function
         * */


        /**
         * Does a complete refresh of the in memory row model. Shotgun approach for any row changes you have done.
         * @function
         * */

        /* Data end */

        /* Looping Through Data start */
        /**
         * 	Iterates through each node (row) in the grid and calls the callback for each node.
         * 	This works similar to the 'forEach' method on a Javascript array.
         * 	This is called for every node, ignoring any filtering or sorting applied within the grid.
         * 	If pagination, then gets called for the currently loaded page.
         * 	If virtual paging, then gets called for each virtual page loaded in the page cache.
         * @function
         * */


        /**
         * Similar to forEachNode, except skips any filtered out data.
         * @function
         * */


        /**
         * Similar to forEachNode, except skips any filtered out data and each the callback
         * is called in the order the rows are displayed in the grid.
         * @function
         * */


        /**
         * Similar to forEachNode, except lists all the leaf nodes.
         * This effectively goes through all the data that you provided the grid before the grid did any grouping.
         * @function
         * */

        /* Looping Through Data end */

        /* Selection start */
        /**
         * Select all rows (even rows that are not visible due to grouping being enabled and their groups not expanded).
         * @function
         * */


        /**
         * Clear all row selections.
         * @function
         * */


        /**
         * Select all filtered rows.
         * @function
         * */


        /**
         * Clear all filtered selections.
         * @function
         * */


        /**
         * Returns a list of selected nodes. Getting the underlying node (rather than the data)
         * is useful when working with tree / aggregated data, as the node can be traversed.
         * @function
         * */


        /**
         * Returns a list of selected rows (ie row data that you provided).
         * @function
         * */


        /**
         * Returns a list of all selected nodes at 'best cost' - a feature to be used with groups / trees.
         * If a group has all it's children selected, then the group appears in the result, but not the children.
         * Designed for use with 'children' as the group selection type,
         * where groups don't actually appear in the selection normally.
         * @function
         * */


        /**
         * Returns the list of selected ranges.
         * @function
         * */


        /**
         * Adds to the selected range.
         * @function
         * */


        /**
         * @function
         * */

        /* Selection end */

        /* Refresh start */
        /**
         * Rip out and re-insert all visible rows.
         * Handy as a blanket 'redraw all' if changes have been made to the row data.
         * @function
         * */


        /**
         * 	Leave the rows intact. Each cell that has been marked as volatile (via colDef attribute) will be redrawn.
         * 	Any cells that are not marked as volatile will be left alone,
         * 	hence keeping any context or state that they have.
         * @function
         * */


        /**
         * Rips out the virtual rows showing representing the provided list of row nodes and then redraws them.
         * @function
         * */


        /**
         * Gets the individual cells for the provided rowNodes to refresh,
         * the row itself and all other cells stay intact.
         * @function
         * */


        /**
         * Redraws the header.
         * Useful if a column name changes, or something else that changes how the column header is displayed.
         * @function
         * */


        /**
         * Rip out and re-insert all visible header and footer rows only.
         * Only need to call if update the aggregate data yourself,
         * as this gets called after recomputeAggregates() anyway.
         * @function
         * */


        /**
         * Gets the grid to recompute the row groups.
         * @function
         * */


        /**
         * Gets the index of the first rendered row.
         * @function
         * */


        /**
         * Gets the index of the last rendered rows.
         * @function
         * */

        /* Refresh end */

        /* Sort and Filter start */
        /**
         * Pass a quick filter text into ag-Grid for filtering.
         * If you won't want to use quickFilterText then you can call this method instead to apply a quick filter.
         * @function
         * */


        /**
         * Returns true if the quick filter is set, otherwise false.
         * @function
         * */


        /**
         * Returns true if the advanced filter is set, otherwise false.
         * @function
         * */


        /**
         * Returns true if any filter is set. This includes quick filter, advanced filter or external filter.
         * @function
         * */


        /**
         * Returns the filter component instance for the column. Either provide the colDef (matches on object reference)
         * or the column field attribute (matches on string comparison). Matching by field is normal.
         * Matching by colDef is useful when field is missing or not unique.
         * @function
         * */


        /**
         * Gets the current state of all the advanced filters. Used for saving filter state.
         * @function
         * */


        /**
         * Sets the state of all the advanced filters.
         * Provide it with what you get from getFilterModel() to restore filter state.
         * @function
         * */


        /**
         * Informs the grid that a filter has changed.
         * This is typically called after a filter change through one of the filter APIs.
         * @function
         * */


        /**
         * Destroys a filter, useful to create get a particular filter created from scratch again.
         * @function
         * */


        /**
         * Gets the grid to act as if the sort was changed.
         * Useful if you update some values in the grid and want to get the grid to reorder
         * them according to the new values.
         * @function
         * */


        /**
         * Sets the sort state of the grid.
         * @function
         * */


        /**
         * Returns the sort state of the grid.
         * @function
         * */

        /* Sort and Filter end */

        /* Groups start */
        /**
         * Expand all groups.
         * @function
         * */


        /**
         * Collapse all groups.
         * @function
         * */


        /**
         * 	If after getting the model, you expand or collapse a group, call this method to inform the grid.
         * 	It will work out the final set of 'to be displayed' rows again (ie expand or collapse the group visually).
         * @function
         * */


        /**
         * Recomputes the aggregates in the model and refreshes all the group rows.
         * @function
         * */


        /**
         * Returns the focused cell as an object containing the rowIndex, column and floating (top, bottom or null).
         * @function
         * */


        /**
         * Sets the focus to the specified cell. Set floating to null, 'top', or 'bottom'.
         * @function
         * */


        /**
         * Clears the focused cell.
         * @function
         * */


        /**
         * Navigates the grid focus to the next cell, as if tabbing.
         * @function
         * */


        /**
         * Navigates the grid focus to the previous cell, as if shift-tabbing.
         * @function
         * */

        /* Groups end */

        /* Editing start */
        /**
         * 	If a cell is editing, it stops the editing.
         * 	Pass 'true' if you want to cancel the editing (ie don't accept changes).
         * 	Default is true.
         * @function
         * */


        /**
         * Gets the grid to start editing on a particular cell.
         * @function
         * */

        /* Editing end */

        /* Export start */
        /**
         * Does a CSV export of the grid's data.
         * @function
         * */


        /**
         * Similar to exportDataAsCsv, except returns result as a string rather than export it.
         * @function
         * */


        /**
         * Does a Excel export of the grid's data.
         * @function
         * */


        /**
         * Similar to exportDataAsExcel, except returns result as a string rather than export it.
         * @function
         * */

        /* Export end */

        /* Events start */
        /**
         * Add an event listener for the said event type. Works similar to addEventListener for a browser DOM element.
         * @function
         * */


        /**
         * Add an event listener for all event types coming from the grid.
         * @function
         * */


        /**
         * Remove an event listener.
         * @function
         * */


        /**
         * Remove a global event listener.
         * @function
         * */


        /**
         * Dispatch an event through the grid.
         * Useful if you are doing a custom cellRenderer and want to fire events such as 'cellValueChanged'.
         * @function
         * */

        /* Events end */

        /* Rendering start */
        /**
         * Retrieve rendered nodes.
         * Due to virtualisation this will contain only the current visible rows and the amount in the buffer.
         * @function
         * */

        /* Rendering end */

        /* Scrolling start */
        /**
         * Ensures the index is visible, scrolling the table if needed.
         * @function
         * */


        /**
         * Ensures the column is visible, scrolling the table if needed.
         * @function
         * */


        /**
         * Ensures a node is visible, scrolling the table if needed. Provide one of a) the node b) the data object c)
         * a comparator function (that takes the node as a parameter, and returns true for match, false for no match)
         * @function
         * */


        /**
         * Returns a JSON object with two properties:
         *  top: The top pixel position of the current scroll in the grid
         *  bottom: The bottom pixel position of the current scroll in the grid
         */

        /* Scrolling end */

        /* Overlay start */
        /**
         * @function
         * Show the loading overlay.
         * */


        /**
         * @function
         * Show the 'no rows' overlay.
         * */


        /**
         * @function
         * Hides the overlay if showing.
         * */

        /* Overlay end */

        /* Clipboard start */
        /**
         * @function
         * Copies the selected ranges to the clipboard.
         * */


        /**
         * @function
         * Copies the selected range down, similar to Ctrl+D in Excel.
         * */

        /* Clipboard end */

        /* Pagination start */
        /**
         * @function
         * Returns true when last page known.
         * This will always be true if you are using the in memory row model for pagination.
         * Returns false when last page now known. This only happens when using infinite scrolling row model.
         * */


        /**
         * @function
         * How many rows ag-Grid is showing per page.
         * */


        /**
         * @function
         * Sets the paginationPageSize to newPageSize
         * Then it repaginates the grid so the changes are applied immediately on the screen.
         * */


        /**
         * @function
         * Returns the 0 index based page which ag-Grid is showing right now.
         * */


        /**
         * @function
         * Returns the total number of pages. If paginationIsLastPageFound() == false returns null.
         * */


        /**
         * @function
         * Shorthands for goToPage(relevantPageNumber).
         * Goes to the specified page. If the page requested doesn't exist, it will go to the last page.
         * */


        /**
         * @function
         * Shorthands for goToPage(relevantPageNumber).
         * */


        /**
         * @function
         * Shorthands for goToPage(relevantPageNumber).
         * */


        /**
         * @function
         * Shorthands for goToPage(relevantPageNumber).
         * */


        /**
         * @function
         * Shorthands for goToPage(relevantPageNumber).
         * */

        /* Pagination end */

        /* Miscellaneous start */
        /**
         * @function
         * Registers a callback to a rendered row. A rendered row is a row that is visually rendered on the screen
         * (rows that are not visible because of the scroll position are not rendered).
         * Unlike normal events, you do not need to unregister rendered row listeners.
         * When the rendered row is removed from the grid, all associated rendered row listeners will also be removed.
         * Currently only one event: 'renderedRowRemoved' - listen for this event if your cellRenderer needs to do
         * clean down after the row no longer exists.
         * */


        /**
         * @function
         * Shows (or hides) the tool panel.
         * */


        /**
         * @function
         * Returns true if the tool panel is showing, otherwise false.
         * */


        /**
         * @function
         * Force the grid to lay out it's components. The grid, by default, resizes to fit the div the grid lives in.
         * This is done
         * a) on initialisation
         * b) window resize and
         * c) every 500ms. You should call this if something happens in your application where the
         * grid size has changed and you want to lay the grid out without waiting for the next 500ms refresh.
         * */


        /**
         * @function
         * Gets the value for a column for a particular rowNode (row).
         * This is useful if you want the raw value of a cell eg implementing your own csv export.
         * */


        /**
         * @function
         * To set the header height (in pixels) after the grid has initialised.
         * Set to null or undefined to use the default of 25px. If havling multiple rows in the header,
         * due to column grouping, this will be the height of each row.
         * */


        /**
         * @function
         * Gets the grid to destroy and release resources. If you are using Angular (version 1 or 2) you do not need
         * to call this, as the grid links in with the AngularJS 1.x lifecycle.
         * However if you are using Web Components or native Javascript, you do need to call this,
         * to avoid a memory leak in your application.
         * */


        /**
         * @function
         * Shows the column menu after and positions it relative to the provided element (button click) or mouse event.
         * Use in conjunction with your own header template.
         * */


        /**
         * @function
         * Shows the column menu after and positions it relative to the provided element (button click) or mouse event.
         * Use in conjunction with your own header template.
         * */


        /**
         * @function
         * Gets the grid to check it's size again. This is useful if you do not have the grid in the DOM when you
         * create it, call this method after the grid is in the dom to get it to check it's width and height again
         * (which decides what columns and rows to render).
         * */


        /**
         * @function
         * 	Gets the grid to recalculated the row heights.
         * */


        /**
         * @function
         * Tells the grid a row height has changed. To be used after calling rowNode.setRowHeight(newHeight).
         * */

        /**
         * @function
         * Copies the selected rows to the clipboard. Set includeHeaders = true to include the headers
         * (default is false) set columnKeys to the list of columns if you don't want just specific columns.
         * */


        /**
         * @function
         * Adding and clearing of aggregation functions.
         * */


        /**
         * @function
         * Adding and clearing of aggregation functions.
         * */


        /**
         * @function
         * Adding and clearing of aggregation functions.
         * */


        _createClass(AgGridApi, [{
            key: 'render',

            /* Miscellaneous end */

            value: function render() {
                var _this2 = this;

                var _state = this.state,
                    isGridReady = _state.isGridReady,
                    gridParams = _state.gridParams;


                if (!this.agGridPassedDownFunctionsMemoized) {
                    this.agGridApiFunctionsPassedDown = options.apiFunctions.reduce(function (acc, value) {
                        acc[value] = _this2[value];

                        return acc;
                    }, {});
                }

                var decoratedComponentProps = void 0;
                var agGridApiProps = _extends({
                    isGridReady: isGridReady,
                    gridParams: gridParams,
                    onGridReady: this.onGridReady
                }, this.agGridApiFunctionsPassedDown);

                if (options.flatten) {
                    decoratedComponentProps = _extends({}, agGridApiProps);
                } else {
                    decoratedComponentProps = {
                        agGridApi: agGridApiProps
                    };
                }

                return _react2.default.createElement(DecoratedComponent, _extends({}, this.props, decoratedComponentProps));
            }
        }]);

        return AgGridApi;
    }(_react.Component);

    AgGridApi.displayName = 'AgGridApi(' + DecoratedComponent.displayName + ')';

    return AgGridApi;
};