'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AgGridRetainFiltering = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEFAULT_OPTIONS = {
    retainOnNewData: true,
    retainOnNewColumns: true
};

var AgGridRetainFiltering = exports.AgGridRetainFiltering = function AgGridRetainFiltering(DecoratedComponent) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_OPTIONS;

    var AgGridRetainFiltering = function (_Component) {
        _inherits(AgGridRetainFiltering, _Component);

        function AgGridRetainFiltering() {
            _classCallCheck(this, AgGridRetainFiltering);

            var _this = _possibleConstructorReturn(this, (AgGridRetainFiltering.__proto__ || Object.getPrototypeOf(AgGridRetainFiltering)).call(this));

            _this.onGridReady = function (params) {
                if (options.retainOnNewData || options.retainOnNewColumns) {
                    params.api.addEventListener('filterChanged', function () {
                        _this.filterOptions = params.api.getFilterModel();
                    });
                }

                if (options.retainOnNewData) {
                    params.api.addEventListener('componentStateChanged', function () {
                        params.api.setFilterModel(_this.filterOptions);
                    });
                }
                if (options.retainOnNewColumns) {
                    params.api.addEventListener('newColumnsLoaded', function () {
                        params.api.setFilterModel(_this.filterOptions);
                    });
                }

                (0, _utils.callWrapperComponentOnGridReady)({ props: _this.props, params: params });
            };

            _this.filterOptions = {};
            return _this;
        }

        _createClass(AgGridRetainFiltering, [{
            key: 'render',
            value: function render() {
                return _react2.default.createElement(DecoratedComponent, _extends({}, this.props, {
                    onGridReady: this.onGridReady
                }));
            }
        }]);

        return AgGridRetainFiltering;
    }(_react.Component);

    AgGridRetainFiltering.displayName = 'AgGridRetainFiltering(' + DecoratedComponent.displayName + ')';

    return AgGridRetainFiltering;
};